###############
# 
# Utility functions for running R scripts with commandline arguments
# Gab Abramowitz & Stefan Gregory CCRC, UNSW 2010 (palshelp at gmail dot com)
#
###############
# Sending error to std err:
CheckError = function(errtext,errcode='U1:'){
	if(errtext != 'ok'){
		# If error, write to std error
		cat(errtext,' ^ \n',file=stderr()); stop()
	}
}

###
# Check the usage of command line call.
###
checkUsage = function(analysisType) {
	if(analysisType=='ModelAnalysis'){
	    if (length(commandArgs()) != 11) {
	    	cat(analysisType,':')
   	    	errtext= "I1: PALSUtils.R usage error: r -f <ScriptName> <ModelOutputFilePath> <ObservedFluxDataFilePath> <OutFileLabel> <ObsDataLabel> <ModelDataLabel> <OutType> <PngWidth> <PngHeight>"
   	    	CheckError(errtext)
   	    }
   	}else if(analysisType=='BenchAnalysis'){
	    if (length(commandArgs()) != 13) {
	    	cat(analysisType,':')
   	    	errtext= "I1: PALSUtils.R usage error: r -f <ScriptName> <BenchmarkRdeclarationsFilePath> <ModelOutputFilePath> <ObservedFluxDataFilePath> <OutFileLabel> <ObsDataLabel> <ModelDataLabel> <OutType> <PngWidth> <PngHeight>"
   	    	CheckError(errtext)
   	    }
	}else if(analysisType=='ObsAnalysis'){
		if (length(commandArgs()) != 9) {
			cat(analysisType,':')
   	     	errtext= "I1: PALSUtil.R usage error: r -f <ScriptName> <ObservedFluxDataFilePath> <OutFileLabel> <ObsDataLabel> <OutType> <PngWidth> <PngHeight>"
   	     	CheckError(errtext)
    	}
    }else if(analysisType=='ConvertSpreadsheetToNcdf'){
		if (length(commandArgs()) != 12) {
			cat(analysisType,':')
   	    	errtext= "I1: PALSUtil.R usage error: r -f <ScriptName> <SpreadsheetPath> <MetNcdfPath> <FluxNcdfPath> <SiteLatitude> <SiteLongitude> <SiteElevation> <TowerMeasHeight> <Sitename> <SitenameVersion>"
   	    	CheckError(errtext)
    	}
    }else if(analysisType=='QCplotsSpreadsheet'){
		if (length(commandArgs()) != 9) {
			cat(analysisType,':')
   	     	errtext= "I1: PALSUtil.R usage error: r -f <ScriptName> <MetNcdfPath> <FluxNcdfPath> <outFigurePath> <OutType> <PngWidth> <PngHeight>"
   	     	CheckError(errtext)
    	}
    }else if(analysisType=='BenchmarkGeneration'){
    	if (length(commandArgs()) != 4) {
			cat(analysisType,':')
   	     	errtext= "I1: PALSUtil.R usage error: r -f <ScriptName> <BenchRfilePath>"
   	     	CheckError(errtext)
    	}
    }else{
    	errtext= "I1: PALSUtil.R usage error: unknown application analysis type."
    	CheckError(errtext)
    }
}	
#

###
# Functions for collecting commandline arguments
###
getModelOutputFilePath = function(analysisType) {
    if(analysisType=='ModelAnalysis'){
    	commandArgs()[4]
    }else if(analysisType=='BenchAnalysis'){
    	commandArgs()[5]
    }else{
    	CheckError('I2: Unknown analysis type requested in getModelOutputFilePath.')
    }
}
getUserBenchNames = function() {
    source(commandArgs()[4])
    return(UserBenchNames)
    #return(commandArgs()[4])
}
getUserBenchPaths = function() {
    source(commandArgs()[4])
    return(UserBenchPaths)
}
getObservedFluxDataFilePath = function(analysisType) {
	if(analysisType=='ModelAnalysis'){
    	obspath=commandArgs()[5]
    }else if(analysisType=='ObsAnalysis'){
    	obspath=commandArgs()[4]
    }else if(analysisType=='BenchAnalysis'){
    	obspath=commandArgs()[6]
    }else{
    	CheckError('I2: Unknown analysis type requested in getObservedFluxDataFilePath.')
    }
    return(obspath)
}
getOutFileLabel = function(analysisType) {
	if(analysisType=='ModelAnalysis'){
    	outfilelabel=commandArgs()[6]
    }else if(analysisType=='ObsAnalysis'){
    	outfilelabel=commandArgs()[5]
    }else if(analysisType=='QCplotsSpreadsheet'){
    	outfilelabel=commandArgs()[6]
    }else if(analysisType=='BenchAnalysis'){
    	outfilelabel=commandArgs()[13]
    }else{
    	CheckError('I2: Unknown analysis type requested in getOutFileLabel.')
    }
    return(outfilelabel)
}
getObsLabel = function(analysisType) {
	if(analysisType=='ModelAnalysis'){
    	obslabel=commandArgs()[7]
    }else if(analysisType=='ObsAnalysis'){
    	obslabel=commandArgs()[6]
    }else if(analysisType=='BenchAnalysis'){
    	obslabel=commandArgs()[8]
    }else{
    	CheckError('I2: Unknown analysis type requested in getObsLabel.')
    }
    return(obslabel)
}
getModLabel = function(analysisType) {
	if(analysisType=='ModelAnalysis'){
    	modlabel=commandArgs()[8]
    }else if(analysisType=='BenchAnalysis'){
    	modlabel=commandArgs()[9]
    }else{
    	CheckError('I2: Unknown analysis type requested in getModLabel.')
    }
    return(modlabel)
}
getOutType = function(analysisType) {
    if(analysisType=='ModelAnalysis'){
    	outtype=commandArgs()[9]
    }else if(analysisType=='ObsAnalysis'){
    	outtype=commandArgs()[7]
    }else if(analysisType=='QCplotsSpreadsheet'){
    	outtype=commandArgs()[7]
    }else if(analysisType=='BenchAnalysis'){
    	outtype=commandArgs()[10]
    }else{
    	CheckError('I2: Unknown analysis type requested in getOutType.')
    }
    return(outtype)
}

###
# Generate the outfile name from label and type
###
getOutFileName = function(outtype,analysisType) {
    paste(getOutFileLabel(analysisType), outtype, sep='.')
}

#####
# Get resolution of rasterised output file (if any)
###
getResolution = function(analysisType){
	if(analysisType=='ModelAnalysis'){
    	iwidth=as.numeric(commandArgs()[10])
    	iheight=as.numeric(commandArgs()[11])
    }else if(analysisType=='ObsAnalysis'){
    	iwidth=as.numeric(commandArgs()[8])
    	iheight=as.numeric(commandArgs()[9])
    }else if(analysisType=='QCplotsSpreadsheet'){
    	iwidth=as.numeric(commandArgs()[8])
    	iheight=as.numeric(commandArgs()[9])
    }else if(analysisType=='BenchAnalysis'){
    	iwidth=as.numeric(commandArgs()[11])
    	iheight=as.numeric(commandArgs()[12])
    }else{
    	CheckError('I2: Unknown analysis type requested in getResolution.')
    }
    ires = list(width=iwidth,height=iheight)
    return(ires)
}

###
# Sets the output, with optional 'size' argument
# in case of rasterized files.
###
setOutput = function(analysisType) {
	outtype = getOutType(analysisType)
	outfilename = getOutFileName(outtype,analysisType)
	ires = getResolution(analysisType)
	if(analysisType=='QCplotsSpreadsheet'){
		fsize = 24	
	}else{
		fsize = ceiling(ires$width / 1500 * 24) # set font size
	}
	# Set output file type, if not to screen:
	if (outtype == 'pdf' ) {
		pdf(file=outfilename, paper='a4r', width=11, height=8)
	}else if (outtype=='ps') {
		postscript(file=outfilename, paper='special', width=11, height=8)
	}else if (outtype == 'png') {
		png(file=outfilename, width=ires$width, height=ires$height, pointsize=fsize)
	}else if(outtype == 'jpg'){
		jpeg(file=outfilename, width=ires$width, height=ires$height, pointsize=fsize)
	}else{
		CheckError(paste('I1: Requested output format not recognised:',outtype))
	}
}
# Copies current graphics device, if pdf, to png device.
copyOutput = function(analysisType) {
	outtype = getOutType(analysisType)
	if(outtype == 'pdf'){
		#library(Cairo)
		# Create png outfilename:
		outfilename = getOutFileName('png',analysisType)
		ires = getResolution(analysisType) # find resolution
		#fsize = ceiling(ires$width / 1500 * 24) # set font size
		#Cairo(width=ires$width, height=ires$height,file=outfilename,
		#	type='png',pointsize=fsize)
		#png(file=outfilename,width=ires$width, height=ires$height,pointsize=fsize,type="quartz")
		#dev.set(dev.prev()) # back to pdf device
		#dev.copy()
		dev2bitmap(file=outfilename,units='px',width=ires$width, height=ires$height,
			pointsize=fsize)
	} # otherwise do nothing
}

##########
# Strips path from filename: 
stripFilename = function(fpath) {
	fsplit = strsplit(fpath,'/')
	fcharvec = as.character(fsplit[[1]])
	fname = fcharvec[length(fcharvec)]
	return(fname)
}
